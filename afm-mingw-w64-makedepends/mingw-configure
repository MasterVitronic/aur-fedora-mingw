# This file is sourced by the configure wrappers: it contains the common
# code between them.
#
# There are four flag types handled by this script: CFLAGS, CPPFLAGS,
# LDFLAGS and CXXFLAGS.
#
# Flags can be set with MINGW_{type} (e.g. MINGW_CPPFLAGS) or injected
# (i.e. appended to the default value) with MINGW_EXTRA_{type}.
#
# There are also 32 and 64 bit variants of all the above variables,
# e.g. MINGW64_EXTRA_FLAGS, with higher precedence than their generic
# counterpart.

set_flags() {
    local arch=$1
    local bits=$2
    shift 2

    # Fallback flags used by AUR Fedora MinGW packages
    local fallback_cflags='-O2 -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4'
    local fallback_cppflags=
    local fallback_ldflags=
    local fallback_cxxflags="$fallback_cflags"

    local cflags="MINGW${bits}_CFLAGS"
    local extra_cflags="MINGW${bits}_EXTRA_CFLAGS"
    local cppflags="MINGW${bits}_CPPFLAGS"
    local extra_cppflags="MINGW${bits}_EXTRA_CPPFLAGS"
    local ldflags="MINGW${bits}_LDFLAGS"
    local extra_ldflags="MINGW${bits}_EXTRA_LDFLAGS"
    local cxxflags="MINGW${bits}_CXXFLAGS"
    local extra_cxxflags="MINGW${bits}_EXTRA_CXXFLAGS"

    # Use export instead of passing variables on the command line configure to
    # be fallback compatible with configure generated by old autoconf
    export CFLAGS="${!cflags:-${MINGW_CFLAGS:-$fallback_cflags}} ${!extra_cflags:-$MINGW_EXTRA_CFLAGS}"
    export CPPFLAGS="${!cppflags:-${MINGW_CPPFLAGS:-$fallback_cppflags}} ${!extra_cppflags:-$MINGW_EXTRA_CPPFLAGS}"
    export LDFLAGS="${!ldflags:-${MINGW_LDFLAGS:-$fallback_ldflags}} ${!extra_ldflags:-$MINGW_EXTRA_LDFLAGS}"
    export CXXFLAGS="${!cxxflags:-${MINGW_CXXFLAGS:-$fallback_cxxflags}} ${!extra_cxxflags:-$MINGW_EXTRA_CXXFLAGS}"
}

# Arguments:
#   architecture:   i686-w64-mingw32 or x86_64-w64-mingw32
#   bits:           32 or 64
#   configure path: path where the configure script resides
#   ...:            additional parameters for configure
call_configure() {
    local arch=$1
    local bits=$2
    local path_to_configure=$3
    shift 3

    set_flags $arch bits

    # Prepend arch bin, just in case
    export PATH="/usr/$arch/bin:$PATH"

    # The following variables are already defined in the Makefile
    # but they need to be exported for gobject-introspection
    export CC=$arch-gcc
    export PKG_CONFIG=$arch-pkg-config
    export DLLTOOL=$arch-dlltool

    # Other gobject-introspection specific variables
    export GI_OS_NAME=nt
    export INTROSPECTION_LAUNCHER="/usr/bin/env WINEARCH=win$bits WINEPREFIX=$srcdir/win$bits DISPLAY= /usr/bin/wine"
    export XDG_DATA_DIRS="/usr/$arch/share:$XDG_DATA_DIRS"
    export GI_TYPELIB_PATH="/usr/$arch/lib/girepository-1.0:$GI_TYPELIB_PATH"

    "$path_to_configure/configure" \
	--build="$CHOST" \
	--host="$arch" \
	--prefix="/usr/$arch" \
	"$@"
}

# Arguments:
#   architecture:  i686-w64-mingw32 or x86_64-w64-mingw32
#   bits:          32 or 64
#   ...:           additional parameters for cmake
call_cmake() {
    local arch=$1
    local bits=$2
    shift 2

    set_flags $arch bits

    cmake \
	-DCMAKE_VERBOSE_MAKEFILE=ON \
	-DCMAKE_INSTALL_PREFIX="/usr/$arch" \
	-DCMAKE_INSTALL_LIBDIR="/usr/$arch/lib" \
	-DINCLUDE_INSTALL_DIR="/usr/$arch/include" \
	-DLIB_INSTALL_DIR="/usr/$arch/lib" \
	-DSYSCONF_INSTALL_DIR="/usr/$arch/etc" \
	-DSHARE_INSTALL_DIR="/usr/$arch/share" \
	-DBUILD_SHARED_LIBS=ON \
	-DCMAKE_TOOLCHAIN_FILE="/usr/share/mingw/Toolchain-$arch.cmake" \
	-DCMAKE_C_FLAGS="$CPPFLAGS $CFLAGS" \
	-DCMAKE_CXX_FLAGS="$CPPFLAGS $CXXFLAGS" \
	-DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS" \
	"$@"
}
